[gd_scene load_steps=33 format=2]

[ext_resource path="res://Scripts/Enemies/Mechanic.gd" type="Script" id=1]
[ext_resource path="res://Sprites/Enemies/Mechanic/Mechanik.png" type="Texture" id=2]
[ext_resource path="res://Sprites/Enemies/Mechanic/Mechanic_NoWeapon.png" type="Texture" id=3]
[ext_resource path="res://Sprites/Enemies/Mechanic/Left_Side_Mechanic.png" type="Texture" id=4]
[ext_resource path="res://Nodes/UI/EnemyHealthBar.tscn" type="PackedScene" id=5]
[ext_resource path="res://Sprites/Enemies/Shadow.png" type="Texture" id=6]
[ext_resource path="res://Sprites/Enemies/Mechanic/Shield.png" type="Texture" id=7]
[ext_resource path="res://Sprites/Enemies/Mechanic/Symbol of block.png" type="Texture" id=8]
[ext_resource path="res://Sprites/Enemies/Mechanic/Summon.png" type="Texture" id=9]
[ext_resource path="res://Sprites/Enemies/Mechanic/Fire_proof.png" type="Texture" id=10]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 73.2012, 50.56 )

[sub_resource type="CircleShape2D" id=2]

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 10, 5.75668 )

[sub_resource type="CircleShape2D" id=4]

[sub_resource type="GDScript" id=5]
resource_name = "RightShield"
script/source = "extends KinematicBody2D

var destroyed = false
var hp        = 1000
var max_hp    = 1000
var armour    = 0.8

var time = 0.0
var freeze = false
var _dead = false

onready var health_bar = $HealthBar2

var resists = [ 0,0,0,0,0 ]

func randomize_resists():
	for i in range(len( resists )):
		resists[i] = randi()% 20 + 10

	resists[randi()%4] = 0 
	resists[4] *= 2

func update_resists():
	randomize_resists()
	var resist_sum = 0 
	for resist in range(len(resists)):
		resist_sum += resists[resist] 

	if resist_sum <= 0 : return

	var max_value = 100
	for value_index in range(len(resists)):
		var node      = health_bar.get_node(\"Resist\" + str(value_index + 1) )
		node.value    = max_value
		max_value    -= int( resists[value_index]  * 100 /resist_sum)
		node.visible  = true
		health_bar.move_child(node, 7)

func set_resists_to_bar():
	health_bar.get_node(\"Health\").max_value = max_hp
	health_bar.get_node(\"Health\").value     = hp

	var resist_sum = 0 
	for resist in range(len(resists)):
		resist_sum += resists[resist] 

	if resist_sum <= 0 : return
	
	var max_value = 100
	for value_index in range(len(resists)):
		var node      = health_bar.get_node(\"Resist\" + str(value_index + 1) )
		node.value    = max_value
		max_value    -= int( resists[value_index]  * 100 /resist_sum)
		node.visible  = true
		health_bar.move_child(node, 7)


func kill_shield():
	hp = 0
	_on_dead()

func _ready():
	randomize_resists()
	set_resists_to_bar()
	$AnimationPlayer.play(\"Idle\")
	
	$\"/root/Game\".perma_state(self, \"queue_free\")
	$\"AnimationPlayer\".play(\"Idle\")

const DAMAGE_TYPE  = [\"NoDamage\", \"Earth\", \"Fire\", \"Water\", \"Wind\", \"Physical\"]

func damage(amount, source = null, type = null):
	var damage = amount

	var type_id = DAMAGE_TYPE.find(type) - 1
	damage = max( 1, int(amount -( resists[type_id] )/2))

	resists[DAMAGE_TYPE.find(\"Physical\") - 1] = max( resists[DAMAGE_TYPE.find(\"Physical\")-1] - damage, 0 )
	set_resists_to_bar()
	
	if resists[DAMAGE_TYPE.find(\"Physical\") - 1] == 0 and type == \"Physical\" : 
		damage *= 2

	if randi()%100 < PlayerStats.statistic[\"critical_chance\"][0]*100 and source == \"player\": 
		damage += PlayerStats.statistic[\"critical_damage\"][0]
		type = \"crit\"
	Res.create_instance(\"DamageNumber\").damage(self, damage, type)

	hp -= damage
	if hp <= 0:
		$\"/root/Game\".save_state(self)
		_dead = true
		health_bar.visible = false
		_on_dead()
	else:
		_on_damage()
	

func _on_damage():
	get_parent()._on_damage()
	pass

func _on_dead():
	Res.play_sample(get_parent(), \"MechanicShieldBreak\")
	Res.play_sample(get_parent(), \"MetalHit1\")
	Res.play_sample(get_parent(), \"MetalHit2\")
	Res.play_sample(get_parent(), \"MetalHit3\")
	play_animation_if_not_playing(\"Dead\")
	destroyed = true
	$\"Shape\".queue_free()
	$\"DamageCollider/Shape\".queue_free()
	

func _process(delta):

	if destroyed:
		#play_animation_if_not_playing(\"Dead\")
		time+=delta
		if time > 3:
			queue_free()
	
	# Called every frame. Delta is time since last frame.
	# Update game logic here.
	pass

func play_animation_if_not_playing(anim, fb = false):
	if !freeze: 
		if $AnimationPlayer.current_animation != anim:
			$\"AnimationPlayer\".play(anim)
		
		if fb:
			$\"AnimationPlayer\".play_backwards(anim)
		

func _on_AnimationPlayer_animation_finished(anim_name):
	if \"Dead\" in anim_name:
		freeze = true
	pass # replace with function body

func _on_attack_hit(collider):
	pass
#	if collider.get_parent().is_in_group(\"players\"):
#		collider.get_parent().damage(self, damage, knockback)"

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 10, 43.7893 )

[sub_resource type="Animation" id=7]
resource_name = "Dead"
length = 11.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 7, 8, 9, 10 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 2, 4, 6, 8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -51.3334, 14.6666 ), Vector2( -4.77805, -3.95553 ), Vector2( 43.0842, 47.9904 ), Vector2( 65.2184, 26.673 ), Vector2( 89.8029, 67.1027 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 89.4181 ]
}

[sub_resource type="Animation" id=8]
resource_name = "Idle"
length = 2.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}

[sub_resource type="GDScript" id=9]
resource_name = "LeftShield"
script/source = "extends KinematicBody2D

var destroyed = false
var hp        = 1000
var max_hp    = 1000
var armour    = 0.8

var time = 0.0
var freeze = false
var _dead = false

onready var health_bar = $HealthBar2

var resists = [ 0,0,0,0,0 ]

func randomize_resists():
	for i in range(len( resists )):
		resists[i] = randi()% 20 + 10

	resists[randi()%4] = 0 
	resists[4] *= 2


func update_resists():
	randomize_resists()
	var resist_sum = 0 
	for resist in range(len(resists)):
		resist_sum += resists[resist] 

	if resist_sum <= 0 : return

	var max_value = 100
	for value_index in range(len(resists)):
		var node      = health_bar.get_node(\"Resist\" + str(value_index + 1) )
		node.value    = max_value
		max_value    -= int( resists[value_index]  * 100 /resist_sum)
		node.visible  = true
		health_bar.move_child(node, 7)

func set_resists_to_bar():
	health_bar.get_node(\"Health\").max_value = max_hp
	health_bar.get_node(\"Health\").value     = hp

	var resist_sum = 0 
	for resist in range(len(resists)):
		resist_sum += resists[resist] 

	if resist_sum <= 0 : return
	
	print( resist_sum , \" \", resists )
	
	var max_value = 100
	for value_index in range(len(resists)):
		var node      = health_bar.get_node(\"Resist\" + str(value_index + 1) )
		node.value    = max_value
		max_value    -= int( resists[value_index]  * 100 /resist_sum)
		node.visible  = true
		health_bar.move_child(node, 7)


func kill_shield():
	hp = 0
	_on_dead()

func _ready():
	randomize_resists()
	set_resists_to_bar()
	$AnimationPlayer.play(\"Idle\")
	
	$\"/root/Game\".perma_state(self, \"queue_free\")
	$\"AnimationPlayer\".play(\"Idle\")

const DAMAGE_TYPE  = [\"NoDamage\", \"Earth\", \"Fire\", \"Water\", \"Wind\", \"Physical\"]

func damage(amount, source = null, type = null):
	var damage = amount

	var type_id = DAMAGE_TYPE.find(type) - 1
	damage = max( 1, int(amount -( resists[type_id] )/2))

	resists[DAMAGE_TYPE.find(\"Physical\") - 1] = max( resists[DAMAGE_TYPE.find(\"Physical\")-1] - damage, 0 )
	set_resists_to_bar()
	
	if resists[DAMAGE_TYPE.find(\"Physical\") - 1] == 0 and type == \"Physical\" : 
		damage *= 2

	if randi()%100 < PlayerStats.statistic[\"critical_chance\"][0]*100 and source == \"player\": 
		damage += PlayerStats.statistic[\"critical_damage\"][0]
		type = \"crit\"
	Res.create_instance(\"DamageNumber\").damage(self, damage, type)

	hp -= damage
	if hp <= 0:
		$\"/root/Game\".save_state(self)
		_dead = true
		health_bar.visible = false
		_on_dead()
	else:
		_on_damage()
	

func _on_damage():
	get_parent()._on_damage()
	pass

func _on_dead():
	Res.play_sample(get_parent(), \"MechanicShieldBreak\")
	Res.play_sample(get_parent(), \"MetalHit1\")
	Res.play_sample(get_parent(), \"MetalHit2\")
	Res.play_sample(get_parent(), \"MetalHit3\")
	play_animation_if_not_playing(\"Dead\")
	destroyed = true
	$\"Shape\".queue_free()
	$\"DamageCollider/Shape\".queue_free()
	

func _process(delta):

	if destroyed:
		#play_animation_if_not_playing(\"Dead\")
		time+=delta
		if time > 3:
			queue_free()
	
	# Called every frame. Delta is time since last frame.
	# Update game logic here.
	pass

func play_animation_if_not_playing(anim, fb = false):
	if !freeze: 
		if $AnimationPlayer.current_animation != anim:
			$\"AnimationPlayer\".play(anim)
		
		if fb:
			$\"AnimationPlayer\".play_backwards(anim)
		

func _on_AnimationPlayer_animation_finished(anim_name):
	if \"Dead\" in anim_name:
		freeze = true
	pass # replace with function body

func _on_attack_hit(collider):
	pass
#	if collider.get_parent().is_in_group(\"players\"):
#		collider.get_parent().damage(self, damage, knockback)"

[sub_resource type="Animation" id=10]
resource_name = "Dead"
length = 11.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 7, 8, 9, 10 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 2, 4, 6, 8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -51.3334, 14.6666 ), Vector2( -100.429, -11.2784 ), Vector2( -146.731, 47.7963 ), Vector2( -163.895, 29.0361 ), Vector2( -195.029, 70.9472 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, -90.1908 ]
}

[sub_resource type="Animation" id=11]
resource_name = "Idle"
length = 2.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}

[sub_resource type="Animation" id=12]
length = 22.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 9, 10, 11, 12, 11, 12, 11, 12, 30, 18, 19, 20, 21, 27, 27, 28, 29 ]
}

[sub_resource type="Animation" id=13]
length = 6.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 3, 4, 5, 6, 7, 8 ]
}

[sub_resource type="Animation" id=14]
length = 3.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2 ]
}

[sub_resource type="Animation" id=15]
length = 6.0
loop = true
step = 1.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/3:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 9, 13, 14, 11, 12, 10 ]
}

[sub_resource type="Animation" id=16]
length = 2.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 31, 32 ]
}

[sub_resource type="Animation" id=17]
length = 3.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 32, 31, 35 ]
}

[sub_resource type="Animation" id=18]
length = 3.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 35, 31, 32 ]
}

[sub_resource type="Animation" id=19]
length = 2.0
step = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 5, 6, 7, 8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 33, 34, 33, 34, 31, 35 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AttackCollider/Shape:disabled")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}

[sub_resource type="Animation" id=20]
length = 26.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprites/2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 10, 9 ]
}

[sub_resource type="Animation" id=21]
resource_name = "FireProof"
length = 30.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 30 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 9, 8, 7, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 9 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("..")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 3, 10, 19, 26, 30 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "set_firebombs"
}, {
"args": [  ],
"method": "set_firebombs"
}, {
"args": [  ],
"method": "set_firebombs"
}, {
"args": [  ],
"method": "set_firebombs"
}, {
"args": [  ],
"method": "on_skill_end"
} ]
}

[sub_resource type="Animation" id=22]
length = 30.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Summon:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 7, 6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 8 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Summon:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 30 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("..")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 25, 30 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [  ],
"method": "summon"
}, {
"args": [  ],
"method": "on_skill_end"
} ]
}

[node name="Mechanic" type="KinematicBody2D" groups=[
"enemies",
]]
scale = Vector2( 1.5, 1.5 )
z_index = 1
script = ExtResource( 1 )

[node name="Sprites" type="Node2D" parent="."]

[node name="1" type="Sprite" parent="Sprites"]
visible = false
use_parent_material = true
position = Vector2( 0.35849, -10.0376 )
texture = ExtResource( 2 )
vframes = 2
hframes = 3

[node name="2" type="Sprite" parent="Sprites"]
use_parent_material = true
texture = ExtResource( 3 )
vframes = 5
hframes = 9
frame = 33

[node name="3" type="Sprite" parent="Sprites"]
visible = false
use_parent_material = true
texture = ExtResource( 4 )
vframes = 4
hframes = 9
frame = 11

[node name="Shape" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -3.27242, 16.156 )
scale = Vector2( 0.943428, 1.35436 )
shape = SubResource( 1 )

[node name="HealthBar" parent="." instance=ExtResource( 5 )]
position = Vector2( -3.6237, -116.279 )

[node name="Radar" type="Area2D" parent="."]
editor/display_folded = true
visible = false
position = Vector2( 54.8449, -57.6189 )
scale = Vector2( 2.7139, 2.80059 )

[node name="Shape" type="CollisionShape2D" parent="Radar"]
position = Vector2( -12.5549, 40.1877 )
scale = Vector2( 22.1174, 19.0943 )
shape = SubResource( 2 )

[node name="DamageCollider" type="Area2D" parent="."]
position = Vector2( -2.69691, -42.6587 )
scale = Vector2( 3.22409, 2.33309 )
collision_layer = 2
collision_mask = 2

[node name="Shape" type="CollisionShape2D" parent="DamageCollider"]
position = Vector2( -0.252633, 28.8976 )
scale = Vector2( 1.18542, 3.59853 )
shape = SubResource( 3 )

[node name="AttackCollider" type="Area2D" parent="."]
visible = false
position = Vector2( 5.02616, -21.725 )
scale = Vector2( 1.08223, 1.51097 )

[node name="Shape" type="CollisionShape2D" parent="AttackCollider"]
position = Vector2( -8.85372, 15.1441 )
scale = Vector2( 12.5081, 8.0687 )
shape = SubResource( 4 )
disabled = true

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0.773505, 75.4428 )
scale = Vector2( 3.02088, 3.00986 )
z_index = -1
texture = ExtResource( 6 )

[node name="RightShield" type="KinematicBody2D" parent="." groups=[
"enemies",
]]
editor/display_folded = true
position = Vector2( 108, -12 )
script = SubResource( 5 )

[node name="Shape" type="CollisionShape2D" parent="RightShield"]
position = Vector2( -51.9742, 24.964 )
scale = Vector2( 3.21101, 1.277 )
shape = SubResource( 6 )

[node name="HealthBar2" parent="RightShield" instance=ExtResource( 5 )]
position = Vector2( -40.9758, -79.4842 )
rotation = 18.8496

[node name="DamageCollider" type="Area2D" parent="RightShield"]
position = Vector2( -2.01085, 38.399 )
scale = Vector2( 1.64965, 0.857156 )
collision_layer = 2
collision_mask = 2

[node name="Shape" type="CollisionShape2D" parent="RightShield/DamageCollider"]
position = Vector2( -21.8834, 3.50968 )
shape = SubResource( 6 )

[node name="Sprite" type="Sprite" parent="RightShield"]
use_parent_material = true
position = Vector2( -51.3334, 14.6666 )
texture = ExtResource( 7 )
flip_h = true
hframes = 5

[node name="AnimationPlayer" type="AnimationPlayer" parent="RightShield"]
autoplay = "Idle"
playback_speed = 16.0
anims/Dead = SubResource( 7 )
anims/Idle = SubResource( 8 )

[node name="LeftShield" type="KinematicBody2D" parent="." groups=[
"enemies",
]]
editor/display_folded = true
position = Vector2( -8.00083, -11.3334 )
script = SubResource( 9 )

[node name="Shape" type="CollisionShape2D" parent="LeftShield"]
position = Vector2( -51.9742, 24.964 )
scale = Vector2( 3.21101, 1.277 )
shape = SubResource( 6 )

[node name="HealthBar2" parent="LeftShield" instance=ExtResource( 5 )]
position = Vector2( -62.8595, -79.7629 )

[node name="DamageCollider" type="Area2D" parent="LeftShield"]
position = Vector2( -80.2203, 38.399 )
scale = Vector2( 2.32832, 0.857156 )
collision_layer = 2
collision_mask = 2

[node name="Shape" type="CollisionShape2D" parent="LeftShield/DamageCollider"]
position = Vector2( 6.26984, 5.61547 )
scale = Vector2( 0.806447, 1 )
shape = SubResource( 6 )

[node name="Sprite" type="Sprite" parent="LeftShield"]
position = Vector2( -51.3334, 14.6666 )
texture = ExtResource( 7 )
hframes = 5

[node name="AnimationPlayer" type="AnimationPlayer" parent="LeftShield"]
autoplay = "Idle"
playback_speed = 16.0
anims/Dead = SubResource( 10 )
anims/Idle = SubResource( 11 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Idle"
playback_speed = 8.0
anims/Dead = SubResource( 12 )
anims/Down = SubResource( 13 )
anims/Idle = SubResource( 14 )
anims/Left = SubResource( 15 )
anims/ShieldBlockHOLD = SubResource( 16 )
anims/ShieldBlockOFF = SubResource( 17 )
anims/ShieldBlockON = SubResource( 18 )
anims/ShieldBlockPayback = SubResource( 19 )
anims/Tired = SubResource( 20 )

[node name="EfectsAnimator" type="Node2D" parent="."]

[node name="Payback" type="Sprite" parent="EfectsAnimator"]
visible = false
position = Vector2( -1.80503, -154.77 )
z_index = 1
texture = ExtResource( 8 )
hframes = 4

[node name="EfectPlayer" type="AnimationPlayer" parent="EfectsAnimator"]
playback_speed = 8.0
anims/FireProof = SubResource( 21 )
anims/Summon = SubResource( 22 )

[node name="Summon" type="Sprite" parent="EfectsAnimator"]
visible = false
position = Vector2( 25.3333, -105.333 )
scale = Vector2( 1, 0.5 )
texture = ExtResource( 9 )
vframes = 2
hframes = 10
frame = 8

[node name="Sprite" type="Sprite" parent="EfectsAnimator"]
visible = false
position = Vector2( 0, -109.333 )
scale = Vector2( 1, 0.5 )
texture = ExtResource( 10 )
hframes = 10
frame = 8
[connection signal="body_entered" from="Radar" to="." method="_on_Radar_body_entered"]
[connection signal="area_entered" from="AttackCollider" to="." method="_on_payback_attack"]
[connection signal="animation_finished" from="RightShield/AnimationPlayer" to="RightShield" method="_on_AnimationPlayer_animation_finished"]
[connection signal="animation_finished" from="LeftShield/AnimationPlayer" to="LeftShield" method="_on_AnimationPlayer_animation_finished"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_animation_finished"]
