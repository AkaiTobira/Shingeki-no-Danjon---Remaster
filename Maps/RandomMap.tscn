[gd_scene load_steps=3 format=2]

[ext_resource path="res://Scripts/Generator.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "RandomMap"
script/source = "extends Node2D

onready var dungeon = $\"Segments\"
var from            = \"UP\"
var my_seed         = null

var segments_holder = {}
var objects_holder  = []
var stairs_holder   = []
var current_floor   = -1
var nav             = null

var initialized     = false

var dungeon_type    = \"\"
var enviroment_object_list    = []

func set_player_position(change):
	Res.game.player.position = ( stairs_holder[0].position  if change >= 0 else stairs_holder[1].position ) + Vector2(0,160)

func initialize():
	if initialized : return
	
	Res.play_music(\"LowerWorkshop\")
	initialized = true
	
	if my_seed == null:
		randomize()
		my_seed = randi()
#		print(\"Seed: \", my_seed)
	seed(my_seed)
	
	for seg_id in segments_holder:
		dungeon.add_child( segments_holder[seg_id][\"segment\"] )
		
	for stairs in stairs_holder:
		if \"stair\" in stairs.name : 
			print(\"Get_repeat\") 
			continue
		dungeon.add_child(stairs)
	
func fill():
#	for stairs in stairs_holder:
#		if \"stair\" in stairs.name :
#			print(\"Get_repeat\") 
#			continue
#		dungeon.add_child(stairs)
	
	for i in range( len(enviroment_object_list) ):
		var obj = enviroment_object_list[i]
		match(obj.type):
			Res.EnvironmentType.Enemy:
				if obj.state == \"Destroyed\": continue
				var instance = Res.get_scene(Res.get_node_path( obj.type ) + obj.name + \".tscn\").instance()
				instance.position = obj.pos
				instance.initialize(i, dungeon_type, obj.name)
				add_child(instance)
			Res.EnvironmentType.Box:
				if obj.state == \"Destroyed\": continue
				var instance = Res.get_scene(Res.get_node_path( obj.type ) + obj.name + \".tscn\").instance()
				instance.position = obj.pos
				instance.initialize(i, dungeon_type, obj.name, current_floor)
				add_child(instance)
			Res.EnvironmentType.Decoration:
				var instance = Res.get_scene(Res.get_node_path( obj.type ) + obj.name + \".tscn\").instance()
				instance.position = obj.pos
				instance.initialize(i, dungeon_type, obj.name, current_floor, obj.flip)
				add_child(instance)
			Res.EnvironmentType.Chest:
				if obj.state == \"Destroyed\": continue
				var instance = Res.get_scene(Res.get_node_path( obj.type ) + obj.name + \".tscn\").instance()
				instance.position = obj.pos
				instance.initialize(i, dungeon_type, obj.name, current_floor)
				add_child(instance)
			Res.EnvironmentType.Trap:
				var instance = Res.get_scene(Res.get_node_path( obj.type ) + obj.name + \".tscn\").instance()
				instance.position = obj.pos
				instance.initialize(i, dungeon_type, obj.name, current_floor, obj.flip)
				if instance.need_more_space: instance.build_trap_arms(obj.closest_empty_space)
				add_child(instance)
				
			#print(obj)
		#Res.get_scene(get_path_toObj(Objects.ENEMIES) + enemy + \".tscn\").instance()
	
	
	#for object in objects_holder:
	#	var node = object[0]
	#	if not is_instance_valid(node) : continue
	#	if check_if_is_active( node.name ): add_child(node)
	#	if node.has_method(\"enable_collisions\"): node.enable_collisions()
	#	node.global_position = object[1]

func check_if_is_active( name ):
	for child in get_children():
		if name == child.name:
			print( name, \" already in tree : skip \" )
			return false
	return true
		

func mark_as_destroyed(id):
	enviroment_object_list[id].state = \"Destroyed\"
	
	if enviroment_object_list[id].type == Res.EnvironmentType.Enemy : return


	var closest_point = nav.get_point_position (nav.get_closest_point( Vector3(enviroment_object_list[id].pos.x, enviroment_object_list[id].pos.y, 0) ))
#	print( closest_point )
	
	closest_point = Vector2(closest_point.x, closest_point.y)
 
	if closest_point != enviroment_object_list[id].pos + Vector2(1,1):
	#	print( closest_point, enviroment_object_list[id].pos )
		var corresponations = [ Vector2( 80,   0), Vector2( -80,   0), Vector2(   0, 80), Vector2(   0, -80),
						  	    Vector2( 80,  80), Vector2(  80, -80), Vector2( -80, 80), Vector2( -80, -80) ]

		var id_1 = nav.get_available_point_id( )
		nav.add_point(id_1, Vector3(enviroment_object_list[id].pos.x + 1, 
									enviroment_object_list[id].pos.y + 1, 0 ))
		for direction in corresponations:
			var id_2 = nav.get_closest_point( Vector3(enviroment_object_list[id].pos.x + 1 + direction.x, 
													  enviroment_object_list[id].pos.y + 1 + direction.y, 0 ))
			if id_1 == id_2: continue
		#	print( \"Connected\" )
			nav.connect_points(id_1, id_2, true)

func clear(): 
	for child in get_children(): 
		if \"Segment\" in child.name : continue
		call_deferred(\"remove_child\", child)
		call_deferred(\"queue_free\"  , child)

func generate(dungeon_name, current_floor, _seed = randi()):
	my_seed = _seed
	seed(my_seed)
	
	print( dungeon_name )
	dungeon_type = dungeon_name
	
	nav = AStar.new()
	self.current_floor = current_floor
	$Generator.generate(dungeon_name, nav, current_floor)
	
	#print( enviroment_object_list )
	"

[node name="RandomMap" type="YSort"]
script = SubResource( 1 )

[node name="Generator" type="Node" parent="."]
script = ExtResource( 1 )

[node name="Segments" type="Node2D" parent="."]
